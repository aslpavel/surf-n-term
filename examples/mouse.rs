use surf_n_term::{
    view::{Align, Container, Margins, Text, View, ViewContext},
    Cell, Face, KeyName, Position, Size, Surface, SurfaceMut, SystemTerminal, Terminal,
    TerminalAction, TerminalCommand, TerminalEvent, TerminalSurfaceExt,
};

type Error = Box<dyn std::error::Error + Sync + Send + 'static>;
const SHEEP: &str = r#"
{
    "view_box": [0, 0, 128, 128],
    "size": [2, 4],
    "path": "M63.14 93.47L63.14 93.47Q59.36 93.47 56.85 91.97Q54.33 90.46 54.33 88.19L54.33 88.19Q54.33 85.95 55.54 84.13Q56.74 82.30 58.76 81.18Q60.78 80.07 63.14 80.07L63.14 80.07Q65.50 80.07 67.50 81.18Q69.50 82.30 70.72 84.13Q71.95 85.95 71.95 88.19L71.95 88.19Q71.95 90.46 69.46 91.97Q66.96 93.47 63.14 93.47ZM26.88 54.89L26.88 54.89Q24.69 54.89 23.15 53.43Q21.60 51.97 21.60 49.91L21.60 49.91Q21.60 47.85 23.15 46.39Q24.69 44.93 26.88 44.93L26.88 44.93Q29.07 44.93 30.64 46.39Q32.21 47.85 32.21 49.91L32.21 49.91Q32.21 51.97 30.64 53.43Q29.07 54.89 26.88 54.89ZM26.88 52.53L26.88 52.53Q28.13 52.53 28.99 51.76Q29.85 50.98 29.85 49.91L29.85 49.91Q29.85 48.84 28.99 48.06Q28.13 47.29 26.88 47.29L26.88 47.29Q25.68 47.29 24.82 48.06Q23.96 48.84 23.96 49.91L23.96 49.91Q23.96 50.98 24.82 51.76Q25.68 52.53 26.88 52.53ZM45.57 79.34L45.57 79.34Q42.05 79.34 39.13 77.60Q36.21 75.86 34.47 72.94Q32.73 70.01 32.73 66.49L32.73 66.49Q32.73 62.93 34.47 60.00Q36.21 57.08 39.13 55.37Q42.05 53.65 45.57 53.65L45.57 53.65Q49.14 53.65 52.06 55.37Q54.98 57.08 56.70 60.00Q58.42 62.93 58.42 66.49L58.42 66.49Q58.42 70.01 56.70 72.94Q54.98 75.86 52.06 77.60Q49.14 79.34 45.57 79.34ZM45.57 76.76L45.57 76.76Q48.45 76.76 50.77 75.36Q53.09 73.97 54.46 71.65Q55.84 69.33 55.84 66.49L55.84 66.49Q55.84 63.61 54.46 61.29Q53.09 58.97 50.77 57.60Q48.45 56.22 45.57 56.22L45.57 56.22Q42.74 56.22 40.42 57.60Q38.10 58.97 36.70 61.29Q35.30 63.61 35.30 66.49L35.30 66.49Q35.30 69.33 36.70 71.65Q38.10 73.97 40.42 75.36Q42.74 76.76 45.57 76.76ZM45.57 70.83L45.57 70.83Q43.81 70.83 42.52 69.54Q41.23 68.25 41.23 66.49L41.23 66.49Q41.23 64.69 42.52 63.42Q43.81 62.15 45.57 62.15L45.57 62.15Q47.37 62.15 48.64 63.42Q49.91 64.69 49.91 66.49L49.91 66.49Q49.91 68.25 48.64 69.54Q47.37 70.83 45.57 70.83ZM54.29 57.64L51.71 57.64L51.71 50.98L54.29 50.98L54.29 57.64ZM60.99 61.98L58.42 61.98L58.42 57.73Q58.42 57.13 58.78 56.76Q59.15 56.40 59.70 56.40L59.70 56.40Q60.26 56.40 60.63 56.76Q60.99 57.13 60.99 57.73L60.99 57.73L60.99 61.98ZM69.76 63.87L56.61 63.87L54.94 60.65L71.26 60.65L69.76 63.87ZM26.07 27.83L26.07 27.83Q23.88 27.83 22.33 26.37Q20.78 24.91 20.78 22.85L20.78 22.85Q20.78 20.78 22.33 19.32Q23.88 17.86 26.07 17.86L26.07 17.86Q28.26 17.86 29.83 19.32Q31.39 20.78 31.39 22.85L31.39 22.85Q31.39 24.91 29.83 26.37Q28.26 27.83 26.07 27.83ZM26.07 25.47L26.07 25.47Q27.31 25.47 28.17 24.69Q29.03 23.92 29.03 22.85L29.03 22.85Q29.03 21.77 28.17 21.00Q27.31 20.22 26.07 20.22L26.07 20.22Q24.86 20.22 24.01 21.00Q23.15 21.77 23.15 22.85L23.15 22.85Q23.15 23.92 24.01 24.69Q24.86 25.47 26.07 25.47ZM66.15 61.55L63.57 61.55L63.57 56.78Q63.57 56.18 63.94 55.82Q64.30 55.45 64.86 55.45L64.86 55.45Q65.42 55.45 65.78 55.82Q66.15 56.18 66.15 56.78L66.15 56.78L66.15 61.55ZM80.71 79.34L80.71 79.34Q77.19 79.34 74.27 77.60Q71.35 75.86 69.61 72.94Q67.87 70.01 67.87 66.49L67.87 66.49Q67.87 62.93 69.61 60.00Q71.35 57.08 74.27 55.37Q77.19 53.65 80.71 53.65L80.71 53.65Q84.28 53.65 87.20 55.37Q90.12 57.08 91.84 60.00Q93.56 62.93 93.56 66.49L93.56 66.49Q93.56 70.01 91.84 72.94Q90.12 75.86 87.20 77.60Q84.28 79.34 80.71 79.34ZM80.71 76.76L80.71 76.76Q83.59 76.76 85.91 75.36Q88.23 73.97 89.60 71.65Q90.98 69.33 90.98 66.49L90.98 66.49Q90.98 63.61 89.60 61.29Q88.23 58.97 85.91 57.60Q83.59 56.22 80.71 56.22L80.71 56.22Q77.88 56.22 75.53 57.60Q73.19 58.97 71.82 61.29Q70.44 63.61 70.44 66.49L70.44 66.49Q70.44 69.33 71.82 71.65Q73.19 73.97 75.53 75.36Q77.88 76.76 80.71 76.76ZM80.71 70.83L80.71 70.83Q78.95 70.83 77.66 69.54Q76.37 68.25 76.37 66.49L76.37 66.49Q76.37 64.69 77.66 63.42Q78.95 62.15 80.71 62.15L80.71 62.15Q82.52 62.15 83.78 63.42Q85.05 64.69 85.05 66.49L85.05 66.49Q85.05 68.25 83.78 69.54Q82.52 70.83 80.71 70.83ZM70.87 61.34L68.30 61.34L68.30 49.95L70.87 49.95L70.87 61.34ZM59.02 54.25L59.02 54.25Q51.33 54.25 45.44 48.84L45.44 48.84Q44.67 49.01 43.77 49.14Q42.86 49.27 41.96 49.27L41.96 49.27Q37.84 49.27 34.98 46.47Q32.12 43.68 32.12 39.64L32.12 39.64Q32.12 37.67 32.94 35.82Q33.76 33.97 35.22 32.51L35.22 32.51Q35.00 31.65 34.85 30.73Q34.70 29.80 34.70 28.99L34.70 28.99Q34.70 25.72 36.31 23.06Q37.92 20.40 40.61 18.79Q43.29 17.17 46.56 17.17L46.56 17.17Q47.50 17.17 48.43 17.30Q49.35 17.43 50.08 17.69L50.08 17.69Q51.58 14.12 54.72 12.00Q57.86 9.87 61.59 9.87L61.59 9.87Q64.90 9.87 67.74 11.55Q70.57 13.22 72.16 16.10L72.16 16.10Q73.45 15.54 74.89 15.26Q76.33 14.98 77.92 14.98L77.92 14.98Q82.00 14.98 85.33 16.96Q88.66 18.94 90.63 22.27Q92.61 25.59 92.61 29.68L92.61 29.68Q92.61 31.18 92.40 32.08L92.40 32.08Q96.05 34.92 96.05 39.64L96.05 39.64Q96.05 43.68 93.25 46.47Q90.46 49.27 86.42 49.27L86.42 49.27Q86.12 49.27 85.80 49.24Q85.48 49.22 85.18 49.18L85.18 49.18Q81.61 53.30 76.20 53.30L76.20 53.30Q74.48 53.30 72.76 52.77Q71.05 52.23 69.54 51.20L69.54 51.20Q64.69 54.25 59.02 54.25ZM59.02 50.81L59.02 50.81Q63.53 50.81 67.24 48.64Q70.96 46.47 73.24 42.74Q75.51 39.00 75.64 34.40L75.64 34.40L79.08 34.40Q78.91 38.83 77.25 42.50Q75.60 46.17 72.55 48.96L72.55 48.96Q73.49 49.39 74.37 49.63Q75.26 49.87 76.20 49.87L76.20 49.87Q78.61 49.87 80.58 48.58Q82.56 47.29 83.89 45.31L83.89 45.31Q85.26 45.83 86.42 45.83L86.42 45.83Q89.04 45.83 90.83 44.05Q92.61 42.26 92.61 39.64L92.61 39.64Q92.61 37.71 91.62 36.16Q90.63 34.62 88.62 33.71L88.62 33.71Q88.96 32.43 89.07 31.52Q89.17 30.62 89.17 29.68L89.17 29.68Q89.17 26.54 87.65 24.01Q86.12 21.47 83.59 19.95Q81.05 18.42 77.92 18.42L77.92 18.42Q75.99 18.42 74.18 18.89Q72.38 19.37 70.74 20.31L70.74 20.31Q69.67 17.26 67.11 15.28Q64.56 13.31 61.59 13.31L61.59 13.31Q58.24 13.31 55.47 15.63Q52.70 17.95 51.80 21.51L51.80 21.51Q50.73 21.13 49.03 20.87Q47.33 20.61 46.56 20.61L46.56 20.61Q43.08 20.61 40.61 23.08Q38.14 25.55 38.14 28.99L38.14 28.99Q38.14 30.19 38.44 31.37Q38.74 32.55 39.43 33.71L39.43 33.71Q37.67 34.66 36.61 36.21Q35.56 37.75 35.56 39.64L35.56 39.64Q35.56 42.43 37.54 44.13Q39.51 45.83 42.78 45.83L42.78 45.83L42.91 45.83Q42.22 44.75 41.68 43.81Q41.15 42.86 40.59 41.70L40.59 41.70L43.85 40.46Q45.79 45.18 49.91 48.00Q54.03 50.81 59.02 50.81ZM105.24 57.90L105.24 57.90Q103.78 57.90 102.58 57.04L102.58 57.04Q100.43 57.04 99.18 55.82Q97.94 54.59 97.94 52.74L97.94 52.74Q97.94 51.37 98.71 50.30Q99.48 49.22 100.77 48.71L100.77 48.71Q101.85 45.87 104.81 45.87L104.81 45.87Q106.57 45.87 107.84 47.14Q109.11 48.41 109.11 50.17L109.11 50.17Q109.11 50.64 108.89 51.37L108.89 51.37Q109.54 52.40 109.54 53.60L109.54 53.60Q109.54 55.41 108.29 56.65Q107.04 57.90 105.24 57.90ZM105.24 55.54L105.24 55.54Q106.06 55.54 106.62 54.98Q107.17 54.42 107.17 53.60L107.17 53.60Q107.17 52.79 106.27 51.76L106.27 51.76Q106.74 50.68 106.74 50.17L106.74 50.17Q106.74 49.35 106.21 48.79Q105.67 48.23 104.81 48.23L104.81 48.23Q103.91 48.23 103.37 48.90Q102.83 49.57 102.75 50.68L102.75 50.68Q101.63 50.77 100.97 51.33Q100.30 51.89 100.30 52.74L100.30 52.74Q100.30 53.56 100.86 54.12Q101.42 54.68 102.23 54.68L102.23 54.68Q102.83 54.68 103.35 54.51L103.35 54.51Q104.12 55.54 105.24 55.54ZM103.69 36.85L103.69 36.85Q101.50 36.85 99.96 35.39Q98.41 33.93 98.41 31.87L98.41 31.87Q98.41 29.80 99.96 28.34Q101.50 26.88 103.69 26.88L103.69 26.88Q105.88 26.88 107.45 28.34Q109.02 29.80 109.02 31.87L109.02 31.87Q109.02 33.93 107.45 35.39Q105.88 36.85 103.69 36.85ZM103.69 34.49L103.69 34.49Q104.94 34.49 105.80 33.71Q106.66 32.94 106.66 31.87L106.66 31.87Q106.66 30.79 105.80 30.02Q104.94 29.25 103.69 29.25L103.69 29.25Q102.49 29.25 101.63 30.02Q100.77 30.79 100.77 31.87L100.77 31.87Q100.77 32.94 101.63 33.71Q102.49 34.49 103.69 34.49ZM99.23 22.97L99.23 22.97Q96.65 22.97 95.57 20.65L95.57 20.65Q94.24 20.31 93.41 19.24Q92.57 18.16 92.57 16.75L92.57 16.75Q92.57 15.03 93.75 13.85Q94.93 12.66 96.65 12.66L96.65 12.66Q99.18 12.66 100.34 14.98L100.34 14.98Q101.67 15.33 102.49 16.40Q103.31 17.48 103.31 18.89L103.31 18.89Q103.31 20.61 102.13 21.79Q100.94 22.97 99.23 22.97ZM99.23 20.83L99.23 20.83Q100.04 20.83 100.60 20.27Q101.16 19.71 101.16 18.89L101.16 18.89Q101.16 17.91 100.41 17.33Q99.66 16.75 98.67 16.96L98.67 16.96Q98.71 16.06 98.11 15.44Q97.51 14.81 96.65 14.81L96.65 14.81Q95.83 14.81 95.27 15.37Q94.72 15.93 94.72 16.75L94.72 16.75Q94.72 17.69 95.45 18.31Q96.18 18.94 97.12 18.68L97.12 18.68Q97.21 19.62 97.81 20.22Q98.41 20.83 99.23 20.83ZM18.46 60.74L18.46 60.74L35.52 60.74L34.49 64.17L22.16 64.17Q23.28 71.52 26.80 77.70Q30.32 83.89 35.78 88.42Q41.23 92.95 48.19 95.45Q55.15 97.94 63.14 97.94L63.14 97.94Q71.13 97.94 78.11 95.45Q85.09 92.95 90.59 88.42Q96.09 83.89 99.66 77.70Q103.22 71.52 104.34 64.17L104.34 64.17L91.79 64.17L90.81 60.74L108.08 60.74Q107.52 69.41 103.89 76.82Q100.26 84.23 94.20 89.73Q88.14 95.23 80.22 98.30Q72.29 101.37 63.14 101.37L63.14 101.37Q53.99 101.37 46.11 98.30Q38.22 95.23 32.23 89.73Q26.24 84.23 22.63 76.82Q19.02 69.41 18.46 60.74Z"
}
"#;

fn stats_view(
    term: &SystemTerminal,
    event: &TerminalEvent,
    event_count: usize,
) -> Result<impl View, Error> {
    let name = "fg=#fbf1c7,bold".parse()?;
    let term_size = term.size().unwrap_or_default();
    let cell_size = term_size.cells_in_pixels(Size::new(1, 1));
    let text = Text::new()
        .push_str("Count     ", Some(name))
        .push_fmt(format_args!("{}\n", event_count))
        .push_str("Events    ", Some(name))
        .push_fmt(format_args!("{:?}\n", event))
        .push_str("Received  ", Some(name))
        .push_fmt(format_args!("{}\n", term.stats().recv))
        .push_str("Send      ", Some(name))
        .push_fmt(format_args!("{}\n", term.stats().send))
        .push_str("Term size ", Some(name))
        .push_fmt(format_args!(
            "{}x{} {}x{} ({}x{})\n",
            term_size.cells.height,
            term_size.cells.width,
            term_size.pixels.height,
            term_size.pixels.height,
            cell_size.height,
            cell_size.width
        ))
        .take();
    Ok(Container::new(text)
        .with_margins(Margins {
            right: 2,
            left: 2,
            top: 1,
            bottom: 1,
        })
        .with_face("fg=#ebdbb2,bg=#458588".parse()?))
}

fn main() -> Result<(), Error> {
    let mut term = SystemTerminal::new()?;

    // enable mouse
    term.execute_many(TerminalCommand::mouse_events_set(true, true))?;
    term.execute_many([
        TerminalCommand::altscreen_set(true),
        TerminalCommand::auto_wrap_set(false),
        TerminalCommand::visible_cursor_set(false),
    ])?;
    term.duplicate_output("/tmp/mouse-example.txt")?;

    let q = TerminalEvent::Key("q".parse()?);
    let ctrlc = TerminalEvent::Key("ctrl+c".parse()?);
    let glyph_face: Face = "fg=#79740e,bg=#ebdbb2".parse()?;
    let glyph = if term.capabilities().glyphs {
        Cell::new_glyph(glyph_face, serde_json::from_str(SHEEP)?)
    } else {
        Cell::new_char(glyph_face, ' ')
    };

    /*
    let img_size = term.size()?.cells_in_pixels(Size::new(2, 4));
    let color1: RGBA = "#d3869b".parse()?;
    let color2: RGBA = "#b8bb26".parse()?;
    let color3: RGBA = "#fb4934".parse()?;
    let cutoff = img_size.height / 6 * 6;
    let img = Image::new(SurfaceOwned::new_with(
        Size::new(img_size.height + 6, img_size.width),
        |pos| {
            if pos.row >= cutoff {
                color3
            } else {
                if ((pos.row / 6) + (pos.col / 6)) % 2 == 0 {
                    color1
                } else {
                    color2
                }
            }
        },
    ));
    */

    let mut event_count = 0;
    let mut pos = Position::new(0, 0);
    term.waker().wake()?;
    term.run_render(|term, event, mut surf| -> Result<_, Error> {
        event_count += 1;
        surf.draw_check_pattern("fg=#282828,bg=#3c3836".parse()?);

        match event {
            None => return Ok(TerminalAction::Wait),
            Some(event) if &event == &q || &event == &ctrlc => return Ok(TerminalAction::Quit(())),
            Some(event) => {
                // update mouse position
                match event {
                    TerminalEvent::Mouse(mouse) if mouse.name == KeyName::MouseMove => {
                        pos = mouse.pos;
                    }
                    _ => (),
                }

                let size = surf.size();
                surf.view_mut(1..-1, 1..-1).draw_view(
                    &ViewContext::new(term)?,
                    Container::new(stats_view(term, &event, event_count)?)
                        .with_vertical(if pos.row > size.height / 2 {
                            Align::Start
                        } else {
                            Align::End
                        })
                        .with_horizontal(if pos.col > size.width / 2 {
                            Align::Start
                        } else {
                            Align::End
                        })
                        .with_margins(Margins {
                            left: 1,
                            right: 1,
                            ..Default::default()
                        }),
                )?;
            }
        };

        if let Some(cell) = surf.get_mut(pos) {
            *cell = glyph.clone(); // Cell::new_image(img.clone());
        }
        Ok(TerminalAction::Wait)
    })?;

    // switch off alt screen
    term.execute(TerminalCommand::altscreen_set(false))?;
    term.poll(Some(std::time::Duration::new(0, 0)))?;

    Ok(())
}
